// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Speed.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RobotsInterfaces {

  /// <summary>Holder for reflection information generated from Speed.proto</summary>
  public static partial class SpeedReflection {

    #region Descriptor
    /// <summary>File descriptor for Speed.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpeedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtTcGVlZC5wcm90byI+CgVTcGVlZBIOCgZkZXN0SWQYAyABKAUSEgoKcmln",
            "aHRTcGVlZBgBIAEoBRIRCglsZWZ0U3BlZWQYAiABKAUiIwoJU3BlZWRQYWNr",
            "EhYKBnNwZWVkcxgBIAMoCzIGLlNwZWVkQhOqAhBSb2JvdHNJbnRlcmZhY2Vz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotsInterfaces.Speed), global::RobotsInterfaces.Speed.Parser, new[]{ "DestId", "RightSpeed", "LeftSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RobotsInterfaces.SpeedPack), global::RobotsInterfaces.SpeedPack.Parser, new[]{ "Speeds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Speed : pb::IMessage<Speed> {
    private static readonly pb::MessageParser<Speed> _parser = new pb::MessageParser<Speed>(() => new Speed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Speed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RobotsInterfaces.SpeedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed(Speed other) : this() {
      destId_ = other.destId_;
      rightSpeed_ = other.rightSpeed_;
      leftSpeed_ = other.leftSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed Clone() {
      return new Speed(this);
    }

    /// <summary>Field number for the "destId" field.</summary>
    public const int DestIdFieldNumber = 3;
    private int destId_;
    /// <summary>
    /// destination id, num large 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestId {
      get { return destId_; }
      set {
        destId_ = value;
      }
    }

    /// <summary>Field number for the "rightSpeed" field.</summary>
    public const int RightSpeedFieldNumber = 1;
    private int rightSpeed_;
    /// <summary>
    /// num between -100 and 100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightSpeed {
      get { return rightSpeed_; }
      set {
        rightSpeed_ = value;
      }
    }

    /// <summary>Field number for the "leftSpeed" field.</summary>
    public const int LeftSpeedFieldNumber = 2;
    private int leftSpeed_;
    /// <summary>
    /// num between -100 and 100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSpeed {
      get { return leftSpeed_; }
      set {
        leftSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Speed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Speed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestId != other.DestId) return false;
      if (RightSpeed != other.RightSpeed) return false;
      if (LeftSpeed != other.LeftSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestId != 0) hash ^= DestId.GetHashCode();
      if (RightSpeed != 0) hash ^= RightSpeed.GetHashCode();
      if (LeftSpeed != 0) hash ^= LeftSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RightSpeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RightSpeed);
      }
      if (LeftSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSpeed);
      }
      if (DestId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestId);
      }
      if (RightSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightSpeed);
      }
      if (LeftSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Speed other) {
      if (other == null) {
        return;
      }
      if (other.DestId != 0) {
        DestId = other.DestId;
      }
      if (other.RightSpeed != 0) {
        RightSpeed = other.RightSpeed;
      }
      if (other.LeftSpeed != 0) {
        LeftSpeed = other.LeftSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RightSpeed = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSpeed = input.ReadInt32();
            break;
          }
          case 24: {
            DestId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPack : pb::IMessage<SpeedPack> {
    private static readonly pb::MessageParser<SpeedPack> _parser = new pb::MessageParser<SpeedPack>(() => new SpeedPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RobotsInterfaces.SpeedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPack(SpeedPack other) : this() {
      speeds_ = other.speeds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPack Clone() {
      return new SpeedPack(this);
    }

    /// <summary>Field number for the "speeds" field.</summary>
    public const int SpeedsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RobotsInterfaces.Speed> _repeated_speeds_codec
        = pb::FieldCodec.ForMessage(10, global::RobotsInterfaces.Speed.Parser);
    private readonly pbc::RepeatedField<global::RobotsInterfaces.Speed> speeds_ = new pbc::RepeatedField<global::RobotsInterfaces.Speed>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RobotsInterfaces.Speed> Speeds {
      get { return speeds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speeds_.Equals(other.speeds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speeds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      speeds_.WriteTo(output, _repeated_speeds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speeds_.CalculateSize(_repeated_speeds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPack other) {
      if (other == null) {
        return;
      }
      speeds_.Add(other.speeds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            speeds_.AddEntriesFrom(input, _repeated_speeds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
