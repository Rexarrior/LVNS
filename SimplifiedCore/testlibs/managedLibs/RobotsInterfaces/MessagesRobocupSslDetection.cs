// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages_robocup_ssl_detection.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from messages_robocup_ssl_detection.proto</summary>
public static partial class MessagesRobocupSslDetectionReflection {

  #region Descriptor
  /// <summary>File descriptor for messages_robocup_ssl_detection.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MessagesRobocupSslDetectionReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiRtZXNzYWdlc19yb2JvY3VwX3NzbF9kZXRlY3Rpb24ucHJvdG8ieAoRU1NM",
          "X0RldGVjdGlvbkJhbGwSEgoKY29uZmlkZW5jZRgBIAEoAhIMCgRhcmVhGAIg",
          "ASgNEgkKAXgYAyABKAISCQoBeRgEIAEoAhIJCgF6GAUgASgCEg8KB3BpeGVs",
          "X3gYBiABKAISDwoHcGl4ZWxfeRgHIAEoAiKXAQoSU1NMX0RldGVjdGlvblJv",
          "Ym90EhIKCmNvbmZpZGVuY2UYASABKAISEAoIcm9ib3RfaWQYAiABKA0SCQoB",
          "eBgDIAEoAhIJCgF5GAQgASgCEhMKC29yaWVudGF0aW9uGAUgASgCEg8KB3Bp",
          "eGVsX3gYBiABKAISDwoHcGl4ZWxfeRgHIAEoAhIOCgZoZWlnaHQYCCABKAIi",
          "2QEKElNTTF9EZXRlY3Rpb25GcmFtZRIUCgxmcmFtZV9udW1iZXIYASABKA0S",
          "EQoJdF9jYXB0dXJlGAIgASgBEg4KBnRfc2VudBgDIAEoARIRCgljYW1lcmFf",
          "aWQYBCABKA0SIQoFYmFsbHMYBSADKAsyEi5TU0xfRGV0ZWN0aW9uQmFsbBIq",
          "Cg1yb2JvdHNfeWVsbG93GAYgAygLMhMuU1NMX0RldGVjdGlvblJvYm90EigK",
          "C3JvYm90c19ibHVlGAcgAygLMhMuU1NMX0RldGVjdGlvblJvYm90YgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SSL_DetectionBall), global::SSL_DetectionBall.Parser, new[]{ "Confidence", "Area", "X", "Y", "Z", "PixelX", "PixelY" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SSL_DetectionRobot), global::SSL_DetectionRobot.Parser, new[]{ "Confidence", "RobotId", "X", "Y", "Orientation", "PixelX", "PixelY", "Height" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SSL_DetectionFrame), global::SSL_DetectionFrame.Parser, new[]{ "FrameNumber", "TCapture", "TSent", "CameraId", "Balls", "RobotsYellow", "RobotsBlue" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class SSL_DetectionBall : pb::IMessage<SSL_DetectionBall> {
  private static readonly pb::MessageParser<SSL_DetectionBall> _parser = new pb::MessageParser<SSL_DetectionBall>(() => new SSL_DetectionBall());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SSL_DetectionBall> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesRobocupSslDetectionReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionBall() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionBall(SSL_DetectionBall other) : this() {
    confidence_ = other.confidence_;
    area_ = other.area_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    pixelX_ = other.pixelX_;
    pixelY_ = other.pixelY_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionBall Clone() {
    return new SSL_DetectionBall(this);
  }

  /// <summary>Field number for the "confidence" field.</summary>
  public const int ConfidenceFieldNumber = 1;
  private float confidence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Confidence {
    get { return confidence_; }
    set {
      confidence_ = value;
    }
  }

  /// <summary>Field number for the "area" field.</summary>
  public const int AreaFieldNumber = 2;
  private uint area_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Area {
    get { return area_; }
    set {
      area_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 3;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 4;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 5;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "pixel_x" field.</summary>
  public const int PixelXFieldNumber = 6;
  private float pixelX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PixelX {
    get { return pixelX_; }
    set {
      pixelX_ = value;
    }
  }

  /// <summary>Field number for the "pixel_y" field.</summary>
  public const int PixelYFieldNumber = 7;
  private float pixelY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PixelY {
    get { return pixelY_; }
    set {
      pixelY_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SSL_DetectionBall);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SSL_DetectionBall other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
    if (Area != other.Area) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PixelX, other.PixelX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PixelY, other.PixelY)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Confidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
    if (Area != 0) hash ^= Area.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (PixelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PixelX);
    if (PixelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PixelY);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Confidence != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Confidence);
    }
    if (Area != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Area);
    }
    if (X != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Z);
    }
    if (PixelX != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(PixelX);
    }
    if (PixelY != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(PixelY);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Confidence != 0F) {
      size += 1 + 4;
    }
    if (Area != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (PixelX != 0F) {
      size += 1 + 4;
    }
    if (PixelY != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SSL_DetectionBall other) {
    if (other == null) {
      return;
    }
    if (other.Confidence != 0F) {
      Confidence = other.Confidence;
    }
    if (other.Area != 0) {
      Area = other.Area;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.PixelX != 0F) {
      PixelX = other.PixelX;
    }
    if (other.PixelY != 0F) {
      PixelY = other.PixelY;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Confidence = input.ReadFloat();
          break;
        }
        case 16: {
          Area = input.ReadUInt32();
          break;
        }
        case 29: {
          X = input.ReadFloat();
          break;
        }
        case 37: {
          Y = input.ReadFloat();
          break;
        }
        case 45: {
          Z = input.ReadFloat();
          break;
        }
        case 53: {
          PixelX = input.ReadFloat();
          break;
        }
        case 61: {
          PixelY = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class SSL_DetectionRobot : pb::IMessage<SSL_DetectionRobot> {
  private static readonly pb::MessageParser<SSL_DetectionRobot> _parser = new pb::MessageParser<SSL_DetectionRobot>(() => new SSL_DetectionRobot());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SSL_DetectionRobot> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesRobocupSslDetectionReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionRobot() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionRobot(SSL_DetectionRobot other) : this() {
    confidence_ = other.confidence_;
    robotId_ = other.robotId_;
    x_ = other.x_;
    y_ = other.y_;
    orientation_ = other.orientation_;
    pixelX_ = other.pixelX_;
    pixelY_ = other.pixelY_;
    height_ = other.height_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionRobot Clone() {
    return new SSL_DetectionRobot(this);
  }

  /// <summary>Field number for the "confidence" field.</summary>
  public const int ConfidenceFieldNumber = 1;
  private float confidence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Confidence {
    get { return confidence_; }
    set {
      confidence_ = value;
    }
  }

  /// <summary>Field number for the "robot_id" field.</summary>
  public const int RobotIdFieldNumber = 2;
  private uint robotId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RobotId {
    get { return robotId_; }
    set {
      robotId_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 3;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 4;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "orientation" field.</summary>
  public const int OrientationFieldNumber = 5;
  private float orientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  /// <summary>Field number for the "pixel_x" field.</summary>
  public const int PixelXFieldNumber = 6;
  private float pixelX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PixelX {
    get { return pixelX_; }
    set {
      pixelX_ = value;
    }
  }

  /// <summary>Field number for the "pixel_y" field.</summary>
  public const int PixelYFieldNumber = 7;
  private float pixelY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PixelY {
    get { return pixelY_; }
    set {
      pixelY_ = value;
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 8;
  private float height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SSL_DetectionRobot);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SSL_DetectionRobot other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
    if (RobotId != other.RobotId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Orientation, other.Orientation)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PixelX, other.PixelX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PixelY, other.PixelY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Confidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
    if (RobotId != 0) hash ^= RobotId.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Orientation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Orientation);
    if (PixelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PixelX);
    if (PixelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PixelY);
    if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Confidence != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Confidence);
    }
    if (RobotId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RobotId);
    }
    if (X != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Y);
    }
    if (Orientation != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Orientation);
    }
    if (PixelX != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(PixelX);
    }
    if (PixelY != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(PixelY);
    }
    if (Height != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(Height);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Confidence != 0F) {
      size += 1 + 4;
    }
    if (RobotId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotId);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Orientation != 0F) {
      size += 1 + 4;
    }
    if (PixelX != 0F) {
      size += 1 + 4;
    }
    if (PixelY != 0F) {
      size += 1 + 4;
    }
    if (Height != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SSL_DetectionRobot other) {
    if (other == null) {
      return;
    }
    if (other.Confidence != 0F) {
      Confidence = other.Confidence;
    }
    if (other.RobotId != 0) {
      RobotId = other.RobotId;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Orientation != 0F) {
      Orientation = other.Orientation;
    }
    if (other.PixelX != 0F) {
      PixelX = other.PixelX;
    }
    if (other.PixelY != 0F) {
      PixelY = other.PixelY;
    }
    if (other.Height != 0F) {
      Height = other.Height;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Confidence = input.ReadFloat();
          break;
        }
        case 16: {
          RobotId = input.ReadUInt32();
          break;
        }
        case 29: {
          X = input.ReadFloat();
          break;
        }
        case 37: {
          Y = input.ReadFloat();
          break;
        }
        case 45: {
          Orientation = input.ReadFloat();
          break;
        }
        case 53: {
          PixelX = input.ReadFloat();
          break;
        }
        case 61: {
          PixelY = input.ReadFloat();
          break;
        }
        case 69: {
          Height = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class SSL_DetectionFrame : pb::IMessage<SSL_DetectionFrame> {
  private static readonly pb::MessageParser<SSL_DetectionFrame> _parser = new pb::MessageParser<SSL_DetectionFrame>(() => new SSL_DetectionFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SSL_DetectionFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesRobocupSslDetectionReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionFrame(SSL_DetectionFrame other) : this() {
    frameNumber_ = other.frameNumber_;
    tCapture_ = other.tCapture_;
    tSent_ = other.tSent_;
    cameraId_ = other.cameraId_;
    balls_ = other.balls_.Clone();
    robotsYellow_ = other.robotsYellow_.Clone();
    robotsBlue_ = other.robotsBlue_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSL_DetectionFrame Clone() {
    return new SSL_DetectionFrame(this);
  }

  /// <summary>Field number for the "frame_number" field.</summary>
  public const int FrameNumberFieldNumber = 1;
  private uint frameNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FrameNumber {
    get { return frameNumber_; }
    set {
      frameNumber_ = value;
    }
  }

  /// <summary>Field number for the "t_capture" field.</summary>
  public const int TCaptureFieldNumber = 2;
  private double tCapture_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TCapture {
    get { return tCapture_; }
    set {
      tCapture_ = value;
    }
  }

  /// <summary>Field number for the "t_sent" field.</summary>
  public const int TSentFieldNumber = 3;
  private double tSent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TSent {
    get { return tSent_; }
    set {
      tSent_ = value;
    }
  }

  /// <summary>Field number for the "camera_id" field.</summary>
  public const int CameraIdFieldNumber = 4;
  private uint cameraId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CameraId {
    get { return cameraId_; }
    set {
      cameraId_ = value;
    }
  }

  /// <summary>Field number for the "balls" field.</summary>
  public const int BallsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::SSL_DetectionBall> _repeated_balls_codec
      = pb::FieldCodec.ForMessage(42, global::SSL_DetectionBall.Parser);
  private readonly pbc::RepeatedField<global::SSL_DetectionBall> balls_ = new pbc::RepeatedField<global::SSL_DetectionBall>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SSL_DetectionBall> Balls {
    get { return balls_; }
  }

  /// <summary>Field number for the "robots_yellow" field.</summary>
  public const int RobotsYellowFieldNumber = 6;
  private static readonly pb::FieldCodec<global::SSL_DetectionRobot> _repeated_robotsYellow_codec
      = pb::FieldCodec.ForMessage(50, global::SSL_DetectionRobot.Parser);
  private readonly pbc::RepeatedField<global::SSL_DetectionRobot> robotsYellow_ = new pbc::RepeatedField<global::SSL_DetectionRobot>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SSL_DetectionRobot> RobotsYellow {
    get { return robotsYellow_; }
  }

  /// <summary>Field number for the "robots_blue" field.</summary>
  public const int RobotsBlueFieldNumber = 7;
  private static readonly pb::FieldCodec<global::SSL_DetectionRobot> _repeated_robotsBlue_codec
      = pb::FieldCodec.ForMessage(58, global::SSL_DetectionRobot.Parser);
  private readonly pbc::RepeatedField<global::SSL_DetectionRobot> robotsBlue_ = new pbc::RepeatedField<global::SSL_DetectionRobot>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SSL_DetectionRobot> RobotsBlue {
    get { return robotsBlue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SSL_DetectionFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SSL_DetectionFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FrameNumber != other.FrameNumber) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TCapture, other.TCapture)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TSent, other.TSent)) return false;
    if (CameraId != other.CameraId) return false;
    if(!balls_.Equals(other.balls_)) return false;
    if(!robotsYellow_.Equals(other.robotsYellow_)) return false;
    if(!robotsBlue_.Equals(other.robotsBlue_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
    if (TCapture != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TCapture);
    if (TSent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TSent);
    if (CameraId != 0) hash ^= CameraId.GetHashCode();
    hash ^= balls_.GetHashCode();
    hash ^= robotsYellow_.GetHashCode();
    hash ^= robotsBlue_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FrameNumber != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FrameNumber);
    }
    if (TCapture != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(TCapture);
    }
    if (TSent != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(TSent);
    }
    if (CameraId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(CameraId);
    }
    balls_.WriteTo(output, _repeated_balls_codec);
    robotsYellow_.WriteTo(output, _repeated_robotsYellow_codec);
    robotsBlue_.WriteTo(output, _repeated_robotsBlue_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FrameNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameNumber);
    }
    if (TCapture != 0D) {
      size += 1 + 8;
    }
    if (TSent != 0D) {
      size += 1 + 8;
    }
    if (CameraId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CameraId);
    }
    size += balls_.CalculateSize(_repeated_balls_codec);
    size += robotsYellow_.CalculateSize(_repeated_robotsYellow_codec);
    size += robotsBlue_.CalculateSize(_repeated_robotsBlue_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SSL_DetectionFrame other) {
    if (other == null) {
      return;
    }
    if (other.FrameNumber != 0) {
      FrameNumber = other.FrameNumber;
    }
    if (other.TCapture != 0D) {
      TCapture = other.TCapture;
    }
    if (other.TSent != 0D) {
      TSent = other.TSent;
    }
    if (other.CameraId != 0) {
      CameraId = other.CameraId;
    }
    balls_.Add(other.balls_);
    robotsYellow_.Add(other.robotsYellow_);
    robotsBlue_.Add(other.robotsBlue_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FrameNumber = input.ReadUInt32();
          break;
        }
        case 17: {
          TCapture = input.ReadDouble();
          break;
        }
        case 25: {
          TSent = input.ReadDouble();
          break;
        }
        case 32: {
          CameraId = input.ReadUInt32();
          break;
        }
        case 42: {
          balls_.AddEntriesFrom(input, _repeated_balls_codec);
          break;
        }
        case 50: {
          robotsYellow_.AddEntriesFrom(input, _repeated_robotsYellow_codec);
          break;
        }
        case 58: {
          robotsBlue_.AddEntriesFrom(input, _repeated_robotsBlue_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
